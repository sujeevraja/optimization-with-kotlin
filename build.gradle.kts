/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm").version("1.3.41")

    // Apply the application plugin to add support for building a CLI application.
    application
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Include lpsolve jar in classpath.
    val lpsolveJarPath: String by project
    compile(files(lpsolveJarPath))

    // Include ortools jar in classpath.
    val ortoolsJarPath: String by project
    compile(files(ortoolsJarPath))

    // Protobuf is a dependency for the Google ortools library. It can be included in the project
    // in the following two ways.

    // Alternative 1: include the protobuf jar file that came with the downloaded ortools archive.
    // This protobuf jar file is usually in the same folder as com.google.ortools.jar. Here, we
    // don't have to worry about the protobuf version as we are using a jar file packaged with the
    // ortools archive.
    val protobufJarPath: String by project
    compile(files(protobufJarPath))

    // Alternative 2: a bit simpler as we don't need to worry about gradle.properties and can
    // directly include protobuf as a dependency just like other libraries. However, we need to be
    // sure that the protobuf version matches the one used by the ortools library.
    // implementation("com.google.protobuf:protobuf-java:3.0.0")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

application {
    // Define the main class for the application
    mainClassName = "examples.AppKt"

    // Include folders with library files in library path.
    val lpsolveLibPath: String by project // lpsolve library files
    val ortoolsLibPath: String by project // ortools library files

    applicationDefaultJvmArgs = listOf(
        "-Djava.library.path=$lpsolveLibPath:$ortoolsLibPath"
    )
}
